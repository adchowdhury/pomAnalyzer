package app.anisan.pomAnalyzer;

import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.Base64;

import org.springframework.http.MediaType;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import app.anisan.pomAnalyzer.log.Logger;
import io.netty.channel.ChannelOption;
import reactor.netty.http.client.HttpClient;

public final class VulnerabilityUpdater {
	
	public static void updateVulnerabilities(POMDependencyObject pomDependencyObject) throws Throwable {
		 String username = "aniruddha.chowdhury@trigyn.com";
	        String password = "3cfd8cb7fea3e14953760f97dbd48ec69372c80e";
	        
	        String basicAuth = Base64.getEncoder().encodeToString((username + ":" + password).getBytes(StandardCharsets.UTF_8));
	        
	        WebClient webClient = WebClient.builder()
	                .baseUrl("https://ossindex.sonatype.org")
	                .defaultHeader("Content-Type", MediaType.APPLICATION_JSON_VALUE)
	                .defaultHeader("Authorization", "Basic " + basicAuth)
	                .clientConnector(new ReactorClientHttpConnector(
	                        HttpClient.create().option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 20000)
	                ))
	                //.defaultHeader("Cookie", "AWSALB=VJu4j4ajJROh9NSGdZV3aCCTeVEjNpLTmOEaDrl4vPMNeIre8fj17WaLaKDURdl08RgTPfb+6c6s+4Q9qrMObXz6sGC38NhBJwrfk9diptegAcjhoDgaqVgi6a93; AWSALBCORS=VJu4j4ajJROh9NSGdZV3aCCTeVEjNpLTmOEaDrl4vPMNeIre8fj17WaLaKDURdl08RgTPfb+6c6s+4Q9qrMObXz6sGC38NhBJwrfk9diptegAcjhoDgaqVgi6a93")
	                .build();

	        String jsonPayload = "{"+
	              "\"coordinates\": ["+
	              	"\"pkg:maven/"+pomDependencyObject.getGroupID() +"/"+ pomDependencyObject.getArtifactID() +"@"+pomDependencyObject.getCurrentVersion() +"\""+
	              "]"+
	            "}";

	        String responseStr = webClient.post()
	                .uri("/api/v3/component-report")
	                .body(BodyInserters.fromValue(jsonPayload))
	                .retrieve()
	                .bodyToMono(String.class).retryWhen(reactor.util.retry.Retry
	                        .backoff(3, Duration.ofSeconds(3))  // Retry up to 3 times with exponential backoff
	                        .filter(throwable -> throwable instanceof WebClientResponseException.TooManyRequests))
	                .block();
	        
	        Logger.log(responseStr, App.verbose);
	        
	        ObjectMapper objectMapper = new ObjectMapper();
	     // Parse the JSON string to JsonNode
            JsonNode rootNode = objectMapper.readTree(responseStr);
         // Loop through each item in the array
            for (JsonNode component : rootNode) {
                JsonNode vulnerabilities = component.get("vulnerabilities");
                if (vulnerabilities != null && vulnerabilities.isArray()) {
                    for (JsonNode vulnerability : vulnerabilities) {
                        String displayName = vulnerability.get("displayName").asText();
                       
                        Vulnerability v = new Vulnerability.VulnerabilityBuilder()
                        		.cveID(displayName)
                        		.title(vulnerability.get("title").asText())
                        		.description(vulnerability.get("description").asText())
                        		.cvssScore(vulnerability.get("cvssScore").asText())
                        		.build();
                        
                        pomDependencyObject.getVulnerabilities().add(displayName);
                        pomDependencyObject.getVulnerabilitiesObject().add(v);
                    }
                }else {
                	Logger.log("No vulnerabilities found", App.verbose);
                }
            }
		
	}
}
